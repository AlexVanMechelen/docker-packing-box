#!/usr/bin/python3
# -*- coding: UTF-8 -*-
from pbox import *
from pbox.__info__ import *
from tinyscript import *


__version__     = "1.0.0"
__doc__         = """
This utility aims to facilitate detectors|packers|unpackers' setup|test according to the related YAML data file.
"""
__description__ = "Setup|test detectors|packers|unpackers (based on the related YAML config)"


def _set_subparsers(parent, *items):
    sparsers = parent.add_subparsers(dest="type", help="select the type of item")
    for i in items:
        p = sparsers.add_parser(i, help="select %s" % i)
        p.add_argument(i, default=[], action="extend", nargs="*", help="specific %s to %s" % (i, parent.name))
        if parent.name == "test":
            p.add_argument("-f", "--file", default=[], action="extend", nargs="*", help="file to test the %s on" % i)


if __name__ == '__main__':
    sparsers = parser.add_subparsers(dest="command", help="command to be executed")
    for n in ["setup", "test"]:
        p = sparsers.add_parser(n, help="%s something" % n)
        _set_subparsers(p, "detector", "packer", "unpacker")
    initialize()
    cls_item = args.type.capitalize()
    for item in globals()[cls_item].registry:
        name = item.__class__.__name__
        arg_item = getattr(args, args.type)
        if not arg_item or item.name in list(map(lambda x: x.lower(), arg_item)):
            try:
                getattr(item, args.command)()
            except:
                logger.critical("%s %s failed: %s" % (cls_item, args.command, name))
                raise

