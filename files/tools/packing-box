#!/usr/bin/python3
# -*- coding: UTF-8 -*-
from ast import literal_eval
from pbox import *
from pbox.__info__ import *
from tinyscript import *


__version__     = "1.2.0"
__doc__         = """
This utility aims to facilitate detectors|packers|unpackers' setup|test according to the related YAML data file.
"""
__description__ = "Setup/test detectors/packers/unpackers (based on the related YAML config)"
__examples__ = [
    "config workspace=/home/user/my-workspace",
    "setup packer",
    "setup detector peid",
    "test packer upx ezuri midgetpack",
    "test -b unpacker upx",
]


_call = lambda cmd: subprocess.call(cmd, stderr=subprocess.PIPE)


def _set_subparsers(parent, *items):
    sparsers = parent.add_subparsers(dest="type", help="select the type of item")
    for i in items:
        p = sparsers.add_parser(i, help="select %s" % i)
        p.add_argument(i, default=[], action="extend", nargs="*", help="specific %s to %s" % (i, parent._name))
        if parent._name == "test":
            p.add_argument("-b", "--benchmark", action="store_true", help="enable benchmarking")
            p.add_argument("-f", "--file", default=[], action="extend", nargs="*", help="file to test the %s on" % i)
            p.add_argument("--boolean", action="store_true", help="only consider packed or not packed labels")


def __item_exists(string):
    for k in ['workspace', 'datasets', 'models']:
        p = config[k].joinpath(string)
        if p.exists():
            return p
    raise ValueError("Path does not exist")


if __name__ == '__main__':
    sparsers = parser.add_subparsers(dest="command", help="command to be executed")
    p = sparsers.add_parser("config", help="set a config option")
    for opt, func, val in config.iteroptions():
        p.add_argument("--" + opt, type=func, default=str(val))
    for n in ["setup", "test"]:
        p = sparsers.add_parser(n, help="%s something" % n)
        p._name = n
        _set_subparsers(p, "detector", "packer", "unpacker")
    p = sparsers.add_parser("workspace", help="inspect the workspace")
    sp = p.add_subparsers(dest="command", help="command to be executed")
    edt = sp.add_parser("edit", help="edit something from the workspace")
    edt.add_argument("item", type=__item_exists, help="item to be edited")
    lst = sp.add_parser("list", help="list the folders and subfolders in the workspace")
    initialize(noargs_action="help", ext_logging=True)
    if args.command == "config":
        change = False
        for opt, func, val in config.iteroptions():
            v = getattr(args, opt)
            if func(v) != func(val):
                config[opt] = v
                logger.debug("Set %s to '%s'" % (opt, v))
                change = True
        if change:
            config.save()
            logger.debug("Saved config to %s" % str(config.path))
    elif args.command == "edit":
        p = args.item
        if p.is_file() and p.extension == ".csv":
            _call(["vd", str(p), "--csv-delimiter", ";"])
        elif p.is_file() and p.extension == ".json":
            _call(["vim", str(p)])
        elif p.is_dir() and p.joinpath("metadata.json").exists():
            _call(["vim", str(p.joinpath("metadata.json"))])
    elif args.command == "list":
        _call(["tree", config['workspace'], "-d"])
    else:
        cls = args.type.capitalize()
        reg = globals()[cls].registry
        selected = list(map(lambda x: x.lower(), getattr(args, args.type)))
        for item in reg:
            if item.name in (selected or [x.name for x in reg if x.status > 0]):
                try:
                    r = getattr(item, args.command)(**vars(args))
                except:
                    logger.critical("%s %s failed: %s" % (cls, args.command, item.__class__.__name__))
                    raise
                if ts.is_generator(r):
                    for i in r:
                        pass

