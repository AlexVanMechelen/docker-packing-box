#!/usr/bin/python3
# -*- coding: UTF-8 -*-
from pbox import *
from pbox.__info__ import *
from tinyscript import *
from tinyscript.report import *
try:  # from Python3.9
    import mdv3 as mdv
except ImportError:
    import mdv


__script__      = "packing-box"
__version__     = "1.1.0"
__description__ = "Display this help message or packer's help"


BANNER_ARG   = "item"
BANNER_FONT  = "starwars"
BANNER_STYLE = {'fgcolor': "lolcat"}
TEMPLATE  = """
This Docker image is a ready-to-use platform for making datasets of packed and not packed executables, especially for training machine learning models.
"""


def overview(show=False):
    """ Display an overview of tools, detectors, packers, unpackers and datasets. """
    report, n = Report(Text(TEMPLATE)), 0
    tools = []
    tools_headers = ["Name", "Description", "Version"]
    for tool in ts.Path(__file__).dirname.listdir(lambda f: f.is_file()):
        row = [tool.stem, "", ""]
        try:
            for line in tool.read_text().splitlines():
                if re.match(r"__(description|version)__", line):
                    row[[1, 2]["__version__" in line]] = line.split("=", 1)[-1].strip(" \"")
        except UnicodeDecodeError:
            continue
        if row[1]:
            tools.append(row)
    report.append(Section("Tools (%d)" % len(tools)), Table(tools, column_headers=tools_headers))
    descr = {}
    for cls in [Detector, Packer, Unpacker]:
        r, d = cls.summary(show)
        report.append(*r)
        descr.update(d)
    report.append(*Dataset.summarize(".", args.show_all))
    report.append(Section("Legend"),
                  Text(" ; ".join("%s  %s" % (k, v) for k, v in sorted(descr.items(), key=lambda x: x[1]))))
    return report.md()


if __name__ == '__main__':
    parser.add_argument("-i", "--item", help="get help for a particular detector, packer or unpacker")
    parser.add_argument("--show-all", action="store_true", help="show all packers, even those that are broken")
    initialize()
    if args.item is None:
        print(mdv.main(overview(args.show_all)))
    else:
        subcls = None
        for cls in [Detector, Packer, Unpacker]:
            subcls = cls.get(args.item)
            if subcls:
                print(mdv.main(subcls.help()))
                break
        if subcls is None:
            logger.error("%s not found" % args.item)

