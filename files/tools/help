#!/usr/bin/python3
# -*- coding: UTF-8 -*-
from pbox import *
from tinyscript import *
from tinyscript.report import *
try:  # from Python3.9
    import mdv3 as mdv
except ImportError:
    import mdv


__script__      = "packing-box"
__author__      = "Alexandre D'Hondt"
__email__       = "alexandre.dhondt@gmail.com"
__copyright__   = ("A. D'Hondt", 2021)
__license__     = "gpl-3.0"
__description__ = "This help message"


BANNER_ARG   = "packer"
BANNER_FONT  = "starwars"
BANNER_STYLE = {'fgcolor': "lolcat"}
MD_TEMPLATE  = """
This Docker image is a ready-to-use platform for making datasets of packed and not packed executables, especially for training machine learning models.
"""
_c = colored
STATUS = [_c("✗", "magenta"), _c("✗", "red"), _c("?", "grey"), _c("✓", "yellow"), _c("✓", "green")]


def overview(show=False):
    """ Display an overview of tools, packers and datasets. """
    md, n = Report(Text(MD_TEMPLATE)), 0
    tools = []
    tools_headers = ["Name", "Description"]
    for tool in ts.Path(__file__).dirname.listdir(lambda f: f.is_file()):
        try:
            for line in tool.read_text().splitlines():
                if "__description__" in line:
                    n += 1
                    tools.append([tool.stem, line.split("=", 1)[1].strip(" \"")])
                    break
        except UnicodeDecodeError:
            continue
    md.append(Section("Tools (%d)" % n), Table(tools, column_headers=tools_headers))
    packers = []
    pheaders = ["Name", "Targets", "Status", "Source"]
    pfooters = [" ", " ", " "]
    descr = ["broken", "not installed", "todo", "installed", "tested"]
    pfooters.append(" ; ".join("%s: %s" % (s, d) for s, d in \
                    zip(STATUS if show else STATUS[1:], descr if show else descr[1:])))
    n = 0
    for packer in PACKERS:
        if not show and packer.status == 0:
            continue
        n += 1
        packers.append([
            packer.__class__.__name__,
            ",".join(packer.categories),
            STATUS[packer.status],
            "<%s>" % packer.source,
        ])
    md.append(Section("Packers (%d)" % n), Table(packers, column_headers=pheaders, column_footers=pfooters))
    datasets = []
    datasets_headers = ["Name", "Size", "Packers"]
    for n, dset in enumerate(ts.Path().listdir(lambda f: f.is_dir() and f.joinpath("metadata.json").exists())):
        with dset.joinpath("metadata.json").open() as meta:
            metadata = json.load(meta)
        datasets.append([
            dset.stem,
            str(metadata['executables']),
            ",".join("%s{%d}" % i for i in sorted(metadata['counts'].items(), key=lambda x: -x[1])),
        ])
    if len(datasets) > 0:
        md.append(Section("Datasets (%d)" % (n+1)), Table(datasets, column_headers=datasets_headers))
    return md.md()


if __name__ == '__main__':
    parser.add_argument("-p", "--packer", help="get help for a particular packer")
    parser.add_argument("--show-all", action="store_true", help="show all packers, even those that are broken")
    initialize()
    print(mdv.main(overview(args.show_all) if args.packer is None else Packer.get(args.packer).help()))

