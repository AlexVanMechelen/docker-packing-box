#!/usr/bin/python3
# -*- coding: UTF-8 -*-
from pbox import *
from pbox.__info__ import *
from tinyscript import *


__version__     = "2.0.1"
__doc__         = """
This tool aims to manipulate a dataset in multiple ways by:
- adding new executables from the packing-box Docker image or from a user-defined source, packed or not with the
   selected packers installed in the image.
- updating it with already-packed or not-packed executables given their labels or not (detection can be applied).
- fixing its content.
"""
__examples__    = [
    "fix my-dataset",
    "list --show-all",
    "make my-dataset -c .net -n 500 --source-dir /path/to/dotnet/exe",
    "make my-dataset -c pe,.net -n 2000",
    "reset my-dataset",
    "show my-dataset",
    "update my-dataset --detect --refresh -s /path1/to/exe -s /path2/to/exe",
    "update my-dataset --source-dir /path/to/exe --labels /path/to/exe/labels.json",
    "view my-dataset --ctime-year 2020",
]
__description__ = "Make datasets of packed and not packed executables for use with Machine Learning"


def __add_name(parser, force=False):
    def dataset_exists(string):
        p = config['datasets'].joinpath(string)
        (ts.folder_exists_or_create if force else ts.folder_exists)(str(p))
        if not force and not Dataset.check(p) and not FilelessDataset.check(p):
            raise ValueError("Bad dataset")
        return p
    parser.add_argument("name", type=dataset_exists, help="name of the dataset")
    return parser


if __name__ == '__main__':
    sparsers = parser.add_subparsers(dest="command", help="command to be executed")
    convert = __add_name(sparsers.add_parser("convert", help="convert the target dataset to a fileless one"))
    cgroup = convert.add_mutually_exclusive_group()
    cgroup.add_argument("-f", "--feature", action="extend", nargs="*", help="list of features to be selected")
    cgroup.add_argument("-p", "--pattern", help="pattern of features to be selected")
    fix = __add_name(sparsers.add_parser("fix", help="fix a corrupted dataset"))
    fgroup = fix.add_mutually_exclusive_group()
    fgroup.add_argument("-d", "--detect", action="store_true", help="detect used packer with installed detectors")
    fgroup.add_argument("-l", "--labels", type=ts.json_config, help="set labels from a JSON file")
    listds = sparsers.add_parser("list", help="list all the datasets from the workspace")
    listds.add_argument("--show-all", action="store_true", help="show all datasets, even those that are corrupted")
    make = __add_name(sparsers.add_parser("make", help="add n randomly chosen executables from input sources to the "
                                                       "dataset"), True)
    make.add_argument("-b", "--balance", action="store_true", help="balance the dataset relatively to the number of "
                                                                   "packers used, not between packed and not packed")
    make.add_argument("-c", "--categories", type=ts.values_list, default="All",
                      help="list of categories to be considered")
    make.add_argument("-n", "--number-executables", dest="n", type=ts.pos_int, default=100,
                      help="number of executables for the output dataset")
    make.add_argument("-p", "--packer", action="extend", nargs="*", type=lambda p: Packer.get(p),
                      help="packer to be used")
    make.add_argument("-s", "--source-dir", action="extend", nargs="*", type=lambda p: ts.Path(p, expand=True),
                      help="executables source directory to be included")
    merge = __add_name(sparsers.add_parser("merge", help="merge two datasets"))
    merge.add_argument("name2", type=ts.folder_exists, help="name of the dataset to merge")
    __add_name(sparsers.add_parser("purge", help="purge a dataset"), True)
    remove = __add_name(sparsers.add_parser("remove", help="remove executables from a dataset"))
    remove.add_argument("-q", "--query", help="query for selecting records to be removed")
    rename = __add_name(sparsers.add_parser("rename", help="rename a dataset"))
    rename.add_argument("name2", type=ts.folder_does_not_exist, help="new name of the dataset")
    __add_name(sparsers.add_parser("revert", help="revert a dataset to its previous state"))
    select = __add_name(sparsers.add_parser("select", help="select a subset of the dataset"))
    select.add_argument("name2", type=ts.folder_does_not_exist, help="name of the new dataset")
    select.add_argument("-q", "--query", help="query for selecting records to be selected")
    show = __add_name(sparsers.add_parser("show", help="get an overview of the dataset"))
    show.add_argument("-l", "--limit", default=10, type=int, help="number of executables to be displayed per category")
    show.add_argument("--per-category", action="store_true", help="display statistics per category")
    update = __add_name(sparsers.add_parser("update", help="update a dataset with new executables"), True)
    ugroup = update.add_mutually_exclusive_group()
    ugroup.add_argument("-d", "--detect", action="store_true", help="detect used packer with installed detectors")
    ugroup.add_argument("-l", "--labels", type=ts.json_config, help="set labels from a JSON file")
    update.add_argument("-r", "--refresh", action="store_true", help="refresh labels of already existing executables")
    update.add_argument("-s", "--source-dir", action="extend", nargs="*", type=lambda p: ts.Path(p, expand=True),
                        help="executables source directory to be included")
    view = __add_name(sparsers.add_parser("view", help="view executables filtered from a dataset"))
    view.add_argument("-q", "--query", help="query for selecting records to be viewed")
    initialize(noargs_action="help")
    args.load = args.command != "list"
    ds = (FilelessDataset if getattr(args, "fileless", False) or \
          getattr(args, "name", None) and FilelessDataset.check(args.name) else Dataset)(**vars(args))
    if args.command != "new":
        getattr(ds, args.command)(**vars(args))

