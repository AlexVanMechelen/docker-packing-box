#!/bin/bash
function gitstatus {
  which git > /dev/null 2>&1
  # if the status is fatal, exit now
  [[ "$?" -ne 0 ]] && return 0

  local repo=$(git rev-parse --show-toplevel 2> /dev/null)
  if [[ ! -e "$repo" ]] ; then
    return
  fi

  gitstatus="$( LC_ALL=C git status --untracked-files=${GIT_PROMPT_SHOW_UNTRACKED_FILES:=all} --porcelain --branch )"

  # if the status is fatal, exit now
  [[ "$?" -ne 0 ]] && return 0

  num_staged=0
  num_changed=0
  num_conflicts=0
  num_untracked=0
  while IFS='' read -r line || [[ -n "$line" ]]; do
    status=${line:0:2}
    case "$status" in
      \#\#) branch_line="${line/\.\.\./^}" ;;
      ?M) ((num_changed++)) ;;
      ?D) ((num_changed++)) ;;
      U?) ((num_conflicts++)) ;;
      \?\?) ((num_untracked++)) ;;
      *) ((num_staged++)) ;;
    esac
  done <<< "$gitstatus"

  num_stashed=0
  if [[ "$__GIT_PROMPT_IGNORE_STASH" != "1" ]]; then
    stash_file="$( git rev-parse --git-dir )/logs/refs/stash"
    if [[ -e "${stash_file}" ]]; then
      while IFS='' read -r wcline || [[ -n "$wcline" ]]; do
        ((num_stashed++))
      done < ${stash_file}
    fi
  fi

  clean=0
  if (( num_changed == 0 && num_staged == 0 && num_untracked == 0 && num_stashed == 0 && num_conflicts == 0)) ; then
    clean=1
  fi

  IFS="^" read -ra branch_fields <<< "${branch_line/\#\# }"
  branch="${branch_fields[0]}"
  remote=
  upstream=

  if [[ "$branch" == *"Initial commit on"* ]]; then
    IFS=" " read -ra fields <<< "$branch"
    branch="${fields[3]}"
    remote="_NO_REMOTE_TRACKING_"
  elif [[ "$branch" == *"no branch"* ]]; then
    tag=$( git describe --tags --exact-match )
    if [[ -n "$tag" ]]; then
      branch="$tag"
    else
      branch="_PREHASH_$( git rev-parse --short HEAD )"
    fi
  else
    if [[ "${#branch_fields[@]}" -eq 1 ]]; then
      remote="_NO_REMOTE_TRACKING_"
    else
      IFS="[,]" read -ra remote_fields <<< "${branch_fields[1]}"
      upstream="${remote_fields[0]}"
      for remote_field in "${remote_fields[@]}"; do
        if [[ "$remote_field" == *ahead* ]]; then
          num_ahead=${remote_field:6}
          ahead="_AHEAD_${num_ahead}"
        fi
        if [[ "$remote_field" == *behind* ]]; then
          num_behind=${remote_field:7}
          behind="_BEHIND_${num_behind# }"
        fi
      done
      remote="${behind}${ahead}"
    fi
  fi

  if [[ -z "$remote" ]] ; then
    remote='.'
  fi

  if [[ -z "$upstream" ]] ; then
    upstream='^'
  fi

  GIT_PROMPT_BRANCH="${PUR}"
  GIT_PROMPT_CLEAN="${BGRE}✓"      #✓✔🖏👌👍
  GIT_PROMPT_STAGED="${BRED}•"     #•●
  GIT_PROMPT_CONFLICTS="${BRED}✘"  #✗✘✖
  GIT_PROMPT_CHANGED="${BBLU}+"    #+➕✚
  GIT_PROMPT_UNTRACKED="${BCYA}…"
  GIT_PROMPT_STASHED="${BBLU}⚑"
  GIT_PROMPT_AHEAD="${BWHI}↑"
  GIT_PROMPT_BEHIND="${BWHI}↓"
  GIT_PROMPT_LOCAL="${BWHI}⌂"
  GIT_PROMPT_SEPARATOR="${BWHI}|"
  GIT_PROMPT_UPSTREAM="{${BBLU}_UPSTREAM_${RST}}"

  GIT=""
  remote="${remote/_AHEAD_/$GIT_PROMPT_AHEAD}"
  remote="${remote/_BEHIND_/$GIT_PROMPT_BEHIND}"
  remote="${remote/_NO_REMOTE_TRACKING_/$GIT_PROMPT_LOCAL}"

  GIT_PROMPT=""
  local GIT_BRANCH=${branch}
  local GIT_REMOTE="${remote}"
  local GIT_UPSTREAM="${upstream}"
  local GIT_STAGED=${num_staged}
  local GIT_CONFLICTS=${num_conflicts}
  local GIT_CHANGED=${num_changed}
  local GIT_UNTRACKED=${num_untracked}
  local GIT_STASHED=${num_stashed}
  local GIT_CLEAN=${clean}

  if [[ "." == "$GIT_REMOTE" ]]; then
    unset GIT_REMOTE
  fi

  local STATUS="${GIT_PROMPT_BRANCH}${GIT_BRANCH}${RST}"
  local GIT_UPSTREAM="${GIT_PROMPT_UPSTREAM//_UPSTREAM_/${GIT_UPSTREAM}}"

  __chk_gitvar_status() {
    local v
    if [[ "x$2" == "x-n" ]] ; then
    v="$2 \"\$GIT_$1\""
    else
    v="\$GIT_$1 $2"
    fi
    if eval "test $v" ; then
    if [[ $# -lt 2 || "$3" != '-' ]]; then
      __add_status "\$GIT_PROMPT_$1\$GIT_$1\${RST}"
    else
      __add_status "\$GIT_PROMPT_$1\${RST}"
    fi
    fi
  }

  __add_gitvar_status() {
    __add_status "\$GIT_PROMPT_$1\$GIT_$1\${RST}"
  }

  __add_status() {
    eval "STATUS=\"$STATUS$1\""
  }

#  __add_status        '$GIT_UPSTREAM'
  __chk_gitvar_status 'REMOTE'     '-n'
  __add_status        "$GIT_PROMPT_SEPARATOR"
  __chk_gitvar_status 'STAGED'     '-ne 0'
  __chk_gitvar_status 'CONFLICTS'  '-ne 0'
  __chk_gitvar_status 'CHANGED'    '-ne 0'
  __chk_gitvar_status 'UNTRACKED'  '-ne 0'
  __chk_gitvar_status 'STASHED'    '-ne 0'
  __chk_gitvar_status 'CLEAN'      '-eq 1'   -
  __add_status        "${RST}"

  echo -e -n $STATUS

}

