#!/usr/bin/python3
# -*- coding: UTF-8 -*-
from pbox import *
from tinyscript import *
from tinyscript.helpers import Path


__script__    = "Bash Completions Generator"
__version__   = "1.0"
__requires__  = {'tinyscript': ">=1.30.1"}
__examples__  = [
    "~/.opt/utils/pbox-completions.json -f ~/.bash_completion",
]


_compreply = lambda c, i=1, sc=False, pl=True: f"COMPREPLY{['','+'][pl]}=($(compgen -W \"{' '.join(sorted(set(c)))}\"" \
                                               f" -- \"${{COMP_WORDS[{i}]}}\")){['',' ;;'][sc]}\n"
_dictdepth = lambda d: 1 + max(map(_dictdepth, d.values())) if isinstance(d, dict) and len(d) > 0 else 0
_varname   = lambda d: ["curr", f"{(d-1)*'s'}prev"][d > 0]


def _gen_completions(tool, config, indent=2):
    i = indent * " "
    block, compreply, init, locals_ = "", f"{i}COMPREPLY=()\n", "", f"{i}local"
    # main function for computing a function block
    def _gen_block(cfg, commands, offset=0, no_init=False):
        depths = {}
        # recursive function for building the intermediary dictionary implementing the completions.
        def _dict2depth(dct, cmds, depth=0, parents=()):
            if len(dct) == 0:
                return
            # create parents for this depth and update the reference dictionary for further processing
            ref_dct, ref_cmds = depths.get(depth+1, {}), cmds
            _expand = lambda k, cl, x=(): "|".join(tuple(c for c in cl if re.match(k, c) and c not in x))
            depths.setdefault(depth+1, ref_dct)
            for p in parents:
                ref_subdct = {}
                ref_dct.setdefault(p, ref_subdct)
                ref_dct = ref_subdct
                ref_cmds = ref_cmds.get(p, ref_cmds)
            # expand wildcard
            if '*' in dct.keys():
                used = []
                for k, v in dct.items():
                    if k == '*':
                        continue
                    for cmd in ref_cmds.keys():
                        if re.match(k, cmd):
                            used.append(cmd)
                dct = dict([(_expand(".*", ref_cmds, used), dct.pop('*'))] + list(dct.items()))
            # now parse keys and values recursively to populate the reference dictionary
            for k, v in list(dct.items()):
                if v is None:
                    continue
                nk, nv = _expand(k, ref_cmds) or k.strip("_"), v
                if isinstance(v, dict):
                    # case 1: v holds one key that is reflected in lower depths ; this means that it is not about
                    #          selecting a case from a subparser but simply the next argument
                    #         E.g. {'_test_': {'test': "DO_SOMETHING"}} ;
                    if len(v) == 1 and f"_{k}_" == list(v.keys())[0]:
                        _dict2depth(v, ref_cmds, depth+1, parents)
                    # case 2: v holds one or more keys with case selections, meaning that a subparser is defined
                    #         E.g. {'test': {'choice1|choice2': "DO_SOMETHING"}}
                    else:
                        nv = "|".join(list(sk for sd in v.keys() for sk in _expand(sd, ref_cmds.get(k, {})).split("|")))
                        _dict2depth(v, ref_cmds.get(k, ref_cmds), depth+1, parents+(nk, ))
                dct[nk] = dct.pop(k)
                if nv:
                    ref_dct[nk] = nv
        # function for building format parameters for the template of completions function
        def _depth(dct, indent_offset=0):
            nonlocal block, compreply, init, locals_
            # nested recursive function for building case blocks
            def _cases(dct, depth, argpos, case_offset=0, nested=False):
                nonlocal block
                offset = indent_offset+case_offset*2+1
                block += indent * (offset+1) * " " + f"case \"${_varname(argpos)}\" in\n"
                for case, complv in dct.items():
                    quoted_case = case.replace('|','"|"')
                    block += f"{indent*(offset+2)*' '}\"{quoted_case}\")\n"
                    if isinstance(complv, str) and complv.startswith("FILES:"):
                        ind, tokens = indent * (offset+3) * " ", complv.split(":")[1:]
                        fmts, var, opt = tokens[-1].split(","), "curr", ""
                        if len(tokens) > 1:
                            block += f"{ind}local root=\"{tokens[0]}\"\n"
                            var, opt = "root", " -d"
                        pat = f"{fmts[0]}" if len(fmts) == 1 else f"@({'|'.join(fmts)})"
                        block += f"{ind}local IFS=$'\\n'\n" \
                                 f"{ind}COMPREPLY+=($(compgen{opt} -o plusdirs -f -X '!*.{pat}' -- \"${var}\")) ;;\n"
                        continue
                    elif isinstance(complv, dict) and len(complv) == 1 and case == list(complv.keys())[0]:
                        complv = complv[list(complv.keys())[0]]
                    if isinstance(complv, dict):
                        _cases(complv, depth, argpos-1, case_offset+1, True)
                    elif isinstance(complv, list):
                        for line in complv[:-1]:
                            block += indent * (offset+3) * " " + line.rstrip() + "\n"
                        block += indent * (offset+3) * " " + complv[-1].rstrip() + " ;;\n"
                    else:
                        block += indent * (offset+3) * " " + _compreply([complv.replace("|", " ")], depth+1, True)
                block += indent * (offset+2) * " " + "*) ;;\n"
                block += indent * (offset+1) * " " + f"esac{['', ' ;;'][nested]}\n"
            # start computing parts of the completion script
            max_depth = _dictdepth(dct)
            if max_depth == 0 or len(commands) == 0:
                compreply = indent * " " + _compreply(commands or [dct[1]['']], pl=False)
                locals_ = ""
            else:
                # loop on depth for creating the if blocks
                for depth in range(max_depth):
                    var = _varname(depth)
                    if not no_init:
                        locals_ += f" {var}"
                        init += indent * " " + f"{var}=${{COMP_WORDS[COMP_CWORD{['-'+str(depth),''][depth==0]}]}}\n"
                    block += indent * (indent_offset+1) * " " + \
                                  f"{['','el'][depth>0]}if [ $COMP_CWORD -eq {depth+1} ]; then\n"
                    # for 'if [ $COMP_CWORD -eq 1 ]' (depth 0), set the complete list of commands
                    if depth == 0:
                        block += indent * (indent_offset+2) * " " + _compreply(commands)
                    # for further depths, create the case block
                    else:
                        _cases(depths[depth], depth, depth)
                #block += indent * (indent_offset+1) * " " + "else\n"
                #block += indent * (indent_offset+2) * " " + "COMPREPLY=()\n"
                block += indent * (indent_offset+1) * " " + "fi\n"
        # compute a transformation of the config dictionary to a format that can be processed by _depth and start
        #  building the parameters for the template
        _dict2depth(cfg, commands)
        _depth(depths, offset)
    # start computation here
    # case (1) list of format [ condition, completions_dictionary_when_true, completions_dictionary_when_false ]
    if isinstance(config, list):
        cond, true, false = config
        true_cmd, false_cmd = [], []
        try:
            true, true_cmd = true
        except TypeError:
            pass
        try:
            false, false_cmd = false
        except TypeError:
            pass
        loc = true.pop('_locals_', {})
        _gen_block(true, get_commands(tool, true_cmd, logger=logger), 1)
        true_block = block
        true_init = ""
        for var, val in loc.items():
            true_init += f"{2*i}{var}={val}\n"
        block = ""
        loc2 = false.pop('_locals_', {})
        _gen_block(false, get_commands(tool, false_cmd, logger=logger), 1, True)
        false_init = ""
        for var, val in loc2.items():
            false_init += f"{2*i}{var}={val}\n"
        block = f"{i}if [[ {cond} ]]; then\n{true_init}{true_block}{i}else\n{false_init}{block}{i}fi\n"
        loc.update(loc2)
    # case (2) completions dictionary
    else:
        loc = config.pop('_locals_', {})
        _gen_block(config, get_commands(tool, logger=logger))
        for var, val in loc.items():
            init += f"{i}{var}={val}\n"
    for var in loc.keys():
        locals_ += f" {var}"
    if locals_ != "":
        locals_ += "\n"
    return f"_{tool.basename}_completions() {{\n{locals_}{compreply}{init}{block}}}\n\n"


def compgen(configs, source, indent=2):
    completes, functions = "", ""
    for f in Path(source, expand=True).listdir(ts.is_file):
        n = f.basename
        config = configs.get(n, "DOES_NOT_EXIST")
        if config == "DOES_NOT_EXIST":
            continue
        logger.debug(f"Generating completion for {n}...")
        if isinstance(config, str):
            functions += f"_{n}_completions() {{\n{config.strip().replace('%%','%')}\n}}\n\n"
        else:
            completion_func = _gen_completions(f, config or {}, indent) or ""
            functions += completion_func + "\n"
            logger.debug(str(f) + ":\n" + completion_func)
        completes += f"complete -o filenames -o bashdefault -F _{n}_completions {n}\n"
    return f"#/usr/bin/env bash\n{functions}{completes}"


if __name__ == '__main__':
    parser.add_argument("config", type=ts.json_file, help="bash completions configuration in JSON format")
    parser.add_argument("-f", "--filename", help="destination filename for the bash completion script",
                        note="when not defined, output to stdout")
    parser.add_argument("-i", "--indent", type=int, default=2, help="block indent")
    parser.add_argument("-s", "--source", default="~/.opt/tools/",
                        help="folder to get the tool source from for retrieving parsers and subparsers")
    initialize()
    result = compgen(args.config, args.source, args.indent)
    if args.filename:
        compl = Path(args.filename)
        compl.write_text(result)
        compl.chmod(0o775)
    else:
        print(result)

