#!/usr/bin/python3
# -*- coding: UTF-8 -*-
from pboxtools import re, run


def parse(output):
    p, patterns = None, []
    for l in output.splitlines():
        try:
            r = re.search(r"^\[ .+? \] The PE is packed with ([^\(\d]+)", l).group(1)
            return r.strip().replace(" ", "-").lower()
        except (AttributeError, TypeError):
            pass
        if "The PE is possibly packed." in l:
            p = "unknown"
        if p == "unknown" and "Unusual section name found:" in l:
            s = l.split(":", 1)[1].strip()
            # observed by trial and error: pattern "/[0-9]+" comes from names of sections of the binary that namely
            #  generate warnings ; Manalyze consider them as "unusual section names", therefore flagging the binary
            #  as possibly packed
            if re.search(r"^/[0-9]+$", s):
                continue
            if len(s) > 0:
                patterns.append(s)  # possibly a string of interest for identifying the packer ; e.g. "petite"
    if len(patterns) == 0 and p == "unknown":
        p = None  # in this case, restore p to None, meaning that the input binary is considered not packed
    return p if len(patterns) == 0 else patterns


if __name__ == "__main__":
    # https://github.com/JusticeRage/Manalyze/blob/master/plugins/plugin_packer_detection.cpp
    run("Manalyze", parse_func=parse, exe_type="pe", exe_help="path to the PE file")

