#!/usr/bin/python3
# -*- coding: UTF-8 -*-
from pboxtools import *


PLUGINS = {
    'all': "run all the available plugins",
    'authenticode': "checks if the digital signature of the PE is valid",
    'clamav': "scans the binary with ClamAV virus definitions",
    'compiler': "tries to determine which compiler generated the binary",
    'cryptoaddress': "looks for valid BTC / XMR addresses in the binary",
    'findcrypt': "detects embedded cryptographic constants",
    'imports': "looks for suspicious imports",
    'mitigation': "displays the enabled exploit mitigation techniques (DEP, ASLR, etc.)",
    'overlay': "analyzes data outside of the PE's boundaries",
    'packer': "tries to structurally detect packer presence (enabled by default)",
    'peid': "returns the PEiD signature of the binary",
    'resources': "analyzes the program's resources",
    'strings': "looks for suspicious strings (anti-VM, process names...)",
    'virustotal': "checks existing AV results on VirusTotal",
}
ARGS = [
    [("--hashes", ),
     {'action': "store_true", 'help': "calculate various hashes of the file (may slow down the analysis!)"}],
    [("-d", "--dump"),
     {'action': "append", 'help': "dump PE information\navailable choices are any combination of:\nall, summary, dos "
                                  "(dos header), pe (pe header), opt (pe optional header), sections,\nimports, exports,"
                                  " resources, version, debug, tls, config (image load configuration),\ndelay (delay-"
                                  "load table), rich"}],
    [("-o", "--output"),
     {'metavar': "FORMAT", 'choices': ["raw", "json"], 'default': "raw",
      'help': "output format ('raw' (default) or 'json')"}],
    [("-p", "--plugin"),
     {'action': "append", 'metavar': "NAME", 'choices': [x for x in PLUGINS.keys() if x != "packer"],
      'help': "analyze the binary with additional plugins. (may slow down the analysis!)\navailable plugins:\n%s" % \
              "\n".join(" - {: <14} {}".format(n + ":", d) for n, d in PLUGINS.items())}],
]


def parse(output, **kwargs):
    r = []
    for l in output.splitlines():
        with suppress(AttributeError, TypeError):
            for x in re.search(r"^\[ .+? \] Th(?:e|is) PE is packed with (.+?)$", l).group(1).split(" or "):
                r.append(x)
            continue
        if kwargs['weak']:
            if "The PE is possibly packed." in l:
                r.append("unknown")
            elif "Unusual section name found:" in l:
                s = l.split(":", 1)[1].strip()
                # observed by trial and error: pattern "/[0-9]+" comes from names of sections of the binary that namely
                #  generate warnings ; Manalyze consider them as "unusual section names", therefore flagging the binary
                #  as possibly packed
                if re.search(r"^/[0-9]+$", s):
                    continue
                if len(s) > 0:
                    r.append(s)  # possibly a string of interest for identifying the packer ; e.g. "petite"
    return r


if __name__ == "__main__":
    # https://github.com/JusticeRage/Manalyze/blob/master/plugins/plugin_packer_detection.cpp
    run("Manalyze", parse_func=parse, exe_type="pe", exe_help="path to the PE file", weak_assumptions=True,
        parser_args=ARGS)

