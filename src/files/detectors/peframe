#!/usr/bin/python3
# -*- coding: UTF-8 -*-
from pboxtools import *


ARGS = [
    [("-j", "--json"), {'action': "store_true", 'help': "export short report in JSON"}],
    [("-x", "--xorsearch"), {'help': "search xored string"}],
]


def parse(output, **kwargs):
    js, r = kwargs['orig_args']['json'], []
    # parse JSON output
    if js:
        js = json.loads(output)
        r.extend(js.get('peinfo', {}).get('features', {}).get('packer', []))
        if any(d.get('packer_compiler_signatures.yar', "") == "IsPacked" for d in js.get('yara_plugins', [])):
            r.append("unknown")
        if kwargs['weak']:
            for s in js.get('strings', {}).get('dump', []):
                # collect strings explicitly mentioning it is packed or section names
                if "packed" in s.lower() or s.startswith("."):
                    r.append(s)
    # or parse text output
    else:
        sections, sec = ["Yara Plugins", "Packer", "Sections Suspicious"], None
        for l in output.splitlines():
            if l in sections:
                sec = l
                continue
            if sec is None or 40 * "-" in l:
                continue
            if l == "":
                sec = None
            elif sec == "Yara Plugins" and "IsPacked" in l:
                r.append("unknown")
            elif sec == "Packer":
                r.append(l)
            elif sec == "Sections Suspicious" and kwargs['weak']:
                r.append(l.split(" ", 1)[0].strip())
    # filter out some patterns found by trial and error
    for s in r[:]:
        if s.startswith("Microsoft_Visual_Cpp_"):
            r.remove(s)
    return r


if __name__ == "__main__":
    run("PeFrame", parse_func=parse, exe_type="pe", exe_help="path to the PE file", weak_assumptions=True,
        parser_args=ARGS)

