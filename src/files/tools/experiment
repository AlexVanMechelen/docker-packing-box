#!/usr/bin/python3
# -*- coding: UTF-8 -*-
from pbox import *
from tinyscript import *


_NAME = config.get('experiment')

__script__      = "Experiment management tool"
__version__     = "1.2.0"
__doc__         = """
This tool aims to manage an experiment (a structure that can hold custom YAML configurations, datasets and models).
"""
__description__ = "Manipulate experiments (dedicated workspaces for datasets, models and custom configs)"
__examples__ = [[
    "close",
    "commit",
    "compress",
    "edit",
    "edit features",
    "import config alterations.yml",
    "list",
    "show",
], [
    "compress my-experiment",
    "list",
    "open my-experiment",
    "purge test-*",
]][_NAME == ""]


if __name__ == '__main__':
    sparsers = parser.add_subparsers(dest="command", metavar="CMD", title="positional argument",
                                     help="command to be executed")
    if _NAME is None:
        add_argument(sparsers.add_parser("compress", help="convert the datasets of an experiment to fileless datasets"),
                     "xpname")
        sparsers.add_parser("list", help="list the existing experiments")
        add_argument(sparsers.add_parser("open", help="create a new or open an existing experiment"), "xpname",
                     force=True)
        add_argument(sparsers.add_parser("purge", help="purge an experiment"), "xpname",
                     note="use 'all' to purge every dataset or the wildcard '*' to select a part of them")
    else:
        sparsers.add_parser("close", help="close the current experiment")
        commit = sparsers.add_parser("commit", help="commit the last OS command to the resource file (commands.rc)")
        commit.add_argument("-f", "--force", action="store_true", help="commit without confirmation")
        commit.add_argument("-q", "--quiet", dest="silent", action="store_true",
                              help="do not show warning if nothing to commit")
        sparsers.add_parser("compress", help="convert the datasets to fileless datasets")
        sparsers.add_parser("edit", help="edit the README file or a YAML configuration file") \
                .add_argument("config", nargs="?", default="README", metavar="NAME",
                              help="edit the target experiment's README(.md), commands(.rc) or YAML configuration file")
        imp = sparsers.add_parser("import", help="import a YAML configuration, data or script into the experiment")
        icmds = imp.add_subparsers(dest="subcommand", help="command to be executed")
        icmd_conf = icmds.add_parser("config", help="import a YAML configuration file")
        icmd_conf.add_argument("path", type=yaml_file, metavar="YAML",
                               help="import the target YAML configuration file(s) within the experiment")
        icmd_data = icmds.add_parser("data", help="import a data file")
        icmd_data.add_argument("path", type=ts.file_exists, metavar="DATA",
                               help="import the target data file within the experiment")
        icmd_data.add_argument("-f", "--format", choices=sorted(list(FORMATS.keys()) + expand_formats("All")),
                               default="All", help="set the applicable format of the input data file")
        icmd_script = icmds.add_parser("script", help="import a script")
        icmd_script.add_argument("path", type=ts.file_exists, metavar="SCRIPT",
                                 help="import the script within the experiment")
        sparsers.add_parser("list", help="list the existing experiments")
        sparsers.add_parser("play", help="play the given scenario and update commands.rc") \
                .add_argument("scenario", type=scenario_identifier, help="scenario to be played")
        rem = sparsers.add_parser("remove", help="remove a YAML configuration, data or script from the experiment")
        rcmds = rem.add_subparsers(dest="subcommand", help="command to be executed")
        rcmd_conf = rcmds.add_parser("config", help="remove a YAML configuration file")
        rcmd_conf.add_argument("path", type=yaml_file, metavar="YAML",
                               help="remove the target YAML configuration file(s) from the experiment")
        rcmd_data = rcmds.add_parser("data", help="remove a data file")
        rcmd_data.add_argument("path", type=ts.file_exists, metavar="DATA",
                               help="remove the target data file from the experiment")
        rcmd_script = rcmds.add_parser("script", help="remove a script")
        rcmd_script.add_argument("path", type=ts.file_exists, metavar="SCRIPT",
                                 help="remove the script from the experiment")
        sparsers.add_parser("replay", help="replay commands from experiment's commands.rc")
        sparsers.add_parser("show", help="get an overview of the experiment")
    initialize(noargs_action="usage")
    configure_logging(args.verbose)
    # prepare parsed arguments
    args.name = getattr(args, "name", _NAME)
    args.load = args.name is not None and args.command not in ["list", "purge"]
    # now execute
    xp = Experiment(**vars(args))
    if args.command == "import":  # rationale: cannot name a method 'import' (Python-reserved word)
        xp._import(**vars(args))
    elif args.command == "edit":
        xp.edit(config=args.config, force=True)
    else:
        getattr(xp, args.command)(**vars(args))

