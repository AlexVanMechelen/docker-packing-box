#!/usr/bin/python3
# -*- coding: UTF-8 -*-
from pbox import *
from pbox.__info__ import *
from tinyscript import *


NAME = config['experiment']

__version__     = "1.0.2"
__doc__         = """
This tool aims to manage an experiment (a structure that can hold custom YAML configurations, datasets and models).
"""
__examples__ = [[
    "list",
    "edit",
    "edit features",
    "show",
    "commit",
    "edit commands",
    "compress",
    "close",
], [
    "open my-experiment",
    "compress my-experiment",
    "list",
]][NAME == ""]
__description__ = "Manipulate experiments (dedicated workspaces for datasets, models and custom configs)"


if __name__ == '__main__':
    sparsers = parser.add_subparsers(dest="command", help="command to be executed")
    if NAME != "":
        sparsers.add_parser("close", help="close the current experiment")
        sparsers.add_parser("commit", help="commit the last OS command to the resource file (commands.rc)") \
                .add_argument("-f", "--force", action="store_true", help="commit without confirmation")
        sparsers.add_parser("compress", help="convert the datasets to fileless datasets")
        ch = sorted(["commands", "README"] + list(config.DEFAULTS['definitions'].keys()))
        sparsers.add_parser("edit", help="edit the README file or a YAML configuration file") \
                .add_argument("config", nargs="?", default="README", metavar="NAME", choices=ch,
                              help="edit the target experiment's README(.md), commands(.rc) or YAML configuration file"
                                   "\n {%s}" % ",".join(ch))
        sparsers.add_parser("list", help="list the existing experiments")
        sparsers.add_parser("show", help="get an overview of the experiment")
    else:
        sparsers.add_parser("compress", help="convert the datasets of an experiment to fileless datasets") \
                .add_argument("name", help="name of the experiment to be compressed")
        sparsers.add_parser("list", help="list the existing experiments")
        sparsers.add_parser("open", help="create a new or open an existing experiment") \
                .add_argument("name", help="name of the new or existing experiment")
    initialize(noargs_action="help")
    logger.name = "experiment"
    logging.configLogger(logger, ["INFO", "DEBUG"][args.verbose], fmt=LOG_FORMATS[args.verbose], relative=True)
    if args.command == "list":
        Experiment(load=False).list()
    elif hasattr(args, "name"):
        Experiment(args.name)
    else:
        getattr(Experiment(NAME), args.command)(**vars(args))

