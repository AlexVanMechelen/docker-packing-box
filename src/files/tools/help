#!/usr/bin/python3
# -*- coding: UTF-8 -*-
from pbox import *
from pbox.__info__ import *
from tinyscript import *
from tinyscript.report import *
try:  # from Python3.9
    import mdv3 as mdv
except ImportError:
    import mdv


__script__      = "packing-box"
__version__     = "1.1.1"
__description__ = "Display this help message or packer's help"


BANNER_ARG   = "item"
BANNER_FONT  = "starwars"
BANNER_STYLE = {'fgcolor': "lolcat"}
TEMPLATE  = """
This Docker image is a ready-to-use platform for making datasets of packed and not packed executables, especially for training machine learning models.
"""


def overview(show=False, category=None, family=None, keep=None):
    """ Display an overview of tools, detectors, packers, unpackers and datasets. """
    report, n = Report(Text(TEMPLATE)), 0
    if keep is None:
        tools = []
        tools_headers = ["Name", "Description", "Version"]
        for tool in ts.Path(__file__).dirname.listdir(lambda f: f.is_file()):
            row = [tool.stem, "", ""]
            try:
                for line in tool.read_text().splitlines():
                    if re.match(r"__(description|version)__", line):
                        row[[1, 2]["__version__" in line]] = line.split("=", 1)[-1].strip(" \"")
            except UnicodeDecodeError:
                continue
            if row[1]:
                tools.append(row)
        report.append(Section("Tools (%d)" % len(tools)), Table(tools, column_headers=tools_headers))
    descr = {}
    for cls in ([Detector, Packer, Unpacker] if keep is None else [globals()[keep[:-1].capitalize()]]):
        r, d = cls.summary(show, category, **({'families': family} if cls is Packer else {}))
        if cls is Detector:
            table = r[1]
            table.column_headers.insert(-1, "Superdetector")
            data = []
            for row in table.data:
                dcls = Detector.get(row[0])
                if dcls.status == "ok":
                    v = [colored("☒", "red"), colored("☑", "green")][getattr(dcls, "vote", True)]
                else:
                    v = colored("☒", "grey")
                row.insert(-1, v)
                data.append(row)
            table.data = data
        report.append(*r)
        descr.update(d)
    report.append(Section("Legend"),
                  Text(" ; ".join("%s  %s" % (k, v) for k, v in sorted(descr.items(), key=lambda x: x[1]))))
    if keep is None:
        report.append(*Dataset.summarize(".", args.show_all))
    return report.md()


if __name__ == '__main__':
    megs = [parser.add_mutually_exclusive_group() for i in range(4)]
    megs[0].add_argument("-c", "--category", default="All", help="filter on a category of executables")
    megs[1].add_argument("-f", "--family", default="All", help="filter on a family of packers")
    for i in range(4):
        megs[i].add_argument("-i", "--item", help="get help for a particular detector, packer or unpacker")
    megs[2].add_argument("-k", "--keep", choices=["detectors", "packers", "unpackers"],
                         help="only keep detectors, packers or unpackers")
    megs[3].add_argument("-s", "--show-all", action="store_true", help="show all packers, even those that are broken")
    initialize()
    logger.name = "help"
    logging.configLogger(logger, ["INFO", "DEBUG"][args.verbose], fmt=LOG_FORMATS[args.verbose], relative=True)
    if args.item is None:
        print(mdv.main(overview(args.show_all, args.category, args.family, args.keep)))
    else:
        subcls = None
        for cls in [Detector, Packer, Unpacker]:
            subcls = cls.get(args.item, error=False)
            if subcls:
                print(mdv.main(subcls.help()))
                break
        if subcls is None:
            logger.error("%s not found" % args.item)

