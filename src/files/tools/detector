#!/usr/bin/python3
# -*- coding: UTF-8 -*-
from pbox import *
from pbox.__info__ import *
from pbox.common.utils import *
from tinyscript import *
from tinyscript.report import *


__version__     = "1.0.1"
__doc__         = """
This tool aims to detect the packer used on an input executable, folder of executables or Dataset.
"""
__examples__    = []
__description__ = "Detect the packer used on an input executable/folder/dataset"


if __name__ == '__main__':
    parser.add_argument("executable", help="executable or folder containing executables or dataset")
    parser.add_argument("-d", "--detector", action="extend", nargs="*", type=lambda d: Detector.get(d),
                        help="detector(s) to be used")
    initialize(noargs_action="help", multi_level_debug=True)
    kw = {'debug': args.verbose > 0, 'verbose': args.verbose > 1}
    stats = {'fn': 0, 'fp': 0, 'tn': 0, 'tp': 0}
    if args.detector:
        for name in args.detector:
            for r in Detector.get(name).detect(args.executable, **kw):
                try:
                    e, r, l = r
                except ValueError:
                    e, r = r
                    l = False
                disp = "not packed" if r is None else r
                ([logger.failure, logger.success][r == l] if l is not False else logger.info)("{}: {}".format(e, disp))
                if r is not False:
                    stats[['tp', 'tn'][r is None] if r == l else ['fp', 'fn'][r is None]] += 1
    else:
        for r in Detector.detect(args.executable, **kw):
            try:
                e, r, l, details = r
            except ValueError:
                e, r, l = r
                details = {}
            mlen = 0
            for name in details.keys():
                mlen = max(mlen, len(name))
            for name, label in details.items():
                logger.warning(("{: <%d}: {}" % mlen).format(name, label or "-"))
            [logger.failure, logger.success][r == l]("{}: {}".format(e, r))
            if r is not False:
                stats[['tp', 'tn'][r is None] if r == l else ['fp', 'fn'][r is None]] += 1
    ph, h, m = PERF_HEADERS, ["Accuracy", "Precision", "Recall", "F-Measure"], metrics(**stats)
    m = [ph[k](v) if v >= 0 else "-" for k, v in zip(h, m)]
    r = Section("Detection results: "), Table([m], column_headers=h)
    print(mdv.main(Report(*r).md()))

