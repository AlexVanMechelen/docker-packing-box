#!/usr/bin/python3
# -*- coding: UTF-8 -*-
from pbox import *
from pbox.__info__ import *
from pbox.common.utils import *
from tinyscript import *
from tinyscript.report import *
from tqdm import tqdm


__version__     = "1.0.3"
__doc__         = """
This tool aims to detect the packer used on an input executable, folder of executables or Dataset.
"""
__examples__    = []
__description__ = "Detect the packer used on an input executable/folder/dataset"


if __name__ == '__main__':
    parser.add_argument("executable", help="executable or folder containing executables or dataset")
    parser.add_argument("-b", "--binary", action="store_true", help="only consider if packed or not")
    parser.add_argument("-d", "--detector", action="extend", nargs="*", type=Detector.get,
                        help="detector(s) to be used", note="Uses the superdetector by default")
    grp = parser.add_mutually_exclusive_group()
    grp.add_argument("-f", "--failures-only", action="store_true", help="output failures only")
    grp.add_argument("-m", "--metrics-only", action="store_true", help="output metrics only")
    parser.add_argument("-t", "--threshold", type=float, help="threshold for voting when using multiple detectors")
    parser.add_argument("-w", "--weak", action="store_true", help="also consider weak assumptions")
    initialize(noargs_action="usage", multi_level_debug=True)
    logging.configLogger(logger, ["INFO", "DEBUG"][args.verbose], fmt=LOG_FORMATS[args.verbose], relative=True)
    kw = {'debug': args.verbose > 0, 'verbose': args.verbose > 1, 'multiclass': not args.binary,
          'silent': args.verbose == 0, 'threshold': args.threshold, 'weak': args.weak}
    stats, pbar = {'fn': 0, 'fp': 0, 'tn': 0, 'tp': 0}, None
    try:
        # using a single detector
        if len(args.detector or []) == 1:
            logger.name = "detector"
            for r in Detector.get(args.detector[0]).detect(args.executable, **kw):
                # (executable, computed label, actual label) 
                try:
                    e, r, l = r             # when actual label given beforehand (e.g. for performance check)
                except TypeError:
                    e, r, l = None, -1, -1  # when r == -1, meaning that the executable could not be handled
                except ValueError:
                    e, r = r                # when no actual label provided but detection worked
                    l = -1
                if pbar is None and hasattr(e, "len") and e.len > 1:
                    pbar = tqdm(total=e.len, unit="executable")
                if not args.metrics_only:
                    mc = kw['multiclass']
                    disp = "not packed" if (r is None and mc) or (r is False and not mc) else r if mc else "packed"
                    if not args.failures_only or r != l and r != -1:
                        log = [logger.failure, logger.success][r == l] if l != -1 else logger.debug
                        log("{}: {}".format(e, disp))
                if r != -1:
                    stats[['tp', 'tn'][r is None] if r == l else ['fp', 'fn'][r is None]] += 1
                if pbar is not None:
                    pbar.update()
        # using part or all of the available detectors
        else:
            logger.name = "superdetector"
            if len(args.detector or []) != 0:
                kw['select'] = args.detector
            for r in Detector.detect(args.executable, **kw):
                try:
                    e, r, l, details = r
                except ValueError:
                    e, r, l = r
                    details = {}
                if pbar is None and hasattr(e, "len") and e.len > 1:
                    pbar = tqdm(total=e.len, unit="executable")
                if not args.metrics_only:
                    mlen = 0
                    for name in details.keys():
                        mlen = max(mlen, len(name))
                    msg = "Decisions:"
                    for name, label in details.items():
                        msg += ("\n{: <%d}: {}" % mlen).format(name, label or "-")
                    if msg != "Decisions:":
                        logger.warning(msg)
                    if not args.failures_only or r != l:
                        log = [logger.failure, logger.success][r == l] if l != -1 else logger.debug
                        log("{}: {}".format(e, r))
                if r != -1:
                    stats[['tp', 'tn'][r is None] if r == l else ['fp', 'fn'][r is None]] += 1
                if pbar is not None:
                    pbar.update()
    except Exception as e:
        (logger.exception if args.verbose > 0 else logger.error)(e)
        if args.metrics_only:
            print("E,E,E,E")
        sys.exit(1)
    if pbar is not None:
        pbar.close()
    ph, h, m = PERF_HEADERS, ["Accuracy", "Precision", "Recall", "F-Measure"], metrics(**stats)
    m = [ph[k](v) if v >= 0 else "-" for k, v in zip(h, m)]
    n = sum(stats.values())
    if n > 0:
        if args.metrics_only:
            print(",".join(m))
        elif n == 1:
            print(r)
        else:
            r = Section("Detection results: "), Table([m], column_headers=h)
            print(mdv.main(Report(*r).md()))
    else:
        if args.metrics_only:
            print("-,-,-,-")

